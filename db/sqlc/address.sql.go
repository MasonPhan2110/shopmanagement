// Code generated by sqlc. DO NOT EDIT.
// source: address.sql

package db

import (
	"context"
)

const createBuyerAddress = `-- name: CreateBuyerAddress :one
INSERT INTO "address" (
  buyer_id,
  address
) VALUES (
  $1, $2
)
RETURNING id, buyer_id, address, created_at
`

type CreateBuyerAddressParams struct {
	BuyerID int64  `json:"buyer_id"`
	Address string `json:"address"`
}

func (q *Queries) CreateBuyerAddress(ctx context.Context, arg CreateBuyerAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createBuyerAddress, arg.BuyerID, arg.Address)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.BuyerID,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const getAddress = `-- name: GetAddress :one
SELECT id, buyer_id, address, created_at FROM "address"
WHERE buyer_id = $1 AND address = $2
LIMIT 1
`

type GetAddressParams struct {
	BuyerID int64  `json:"buyer_id"`
	Address string `json:"address"`
}

func (q *Queries) GetAddress(ctx context.Context, arg GetAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddress, arg.BuyerID, arg.Address)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.BuyerID,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const listAddress = `-- name: ListAddress :many
SELECT id, buyer_id, address, created_at FROM "address"
WHERE buyer_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAddressParams struct {
	BuyerID int64 `json:"buyer_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListAddress(ctx context.Context, arg ListAddressParams) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, listAddress, arg.BuyerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Address{}
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.BuyerID,
			&i.Address,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
