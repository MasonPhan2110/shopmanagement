// Code generated by sqlc. DO NOT EDIT.
// source: buyer.sql

package db

import (
	"context"
)

const createBuyer = `-- name: CreateBuyer :one
INSERT INTO "buyer" (
  name
) VALUES (
  $1
)
RETURNING id, name, update_at, created_at
`

func (q *Queries) CreateBuyer(ctx context.Context, name string) (Buyer, error) {
	row := q.db.QueryRowContext(ctx, createBuyer, name)
	var i Buyer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const getBuyer = `-- name: GetBuyer :one
SELECT id, name, update_at, created_at FROM "buyer"
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetBuyer(ctx context.Context, name string) (Buyer, error) {
	row := q.db.QueryRowContext(ctx, getBuyer, name)
	var i Buyer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const listBuyer = `-- name: ListBuyer :many
SELECT id, name, update_at, created_at FROM "buyer"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBuyerParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBuyer(ctx context.Context, arg ListBuyerParams) ([]Buyer, error) {
	rows, err := q.db.QueryContext(ctx, listBuyer, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Buyer{}
	for rows.Next() {
		var i Buyer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UpdateAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
