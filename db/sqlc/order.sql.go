// Code generated by sqlc. DO NOT EDIT.
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order" (
  buyer_id,
  product_id,
  amount,
  unit
) VALUES (
  $1, $2, $3, $4
) RETURNING id, buyer_id, product_id, amount, unit, created_at
`

type CreateOrderParams struct {
	BuyerID   int64  `json:"buyer_id"`
	ProductID int64  `json:"product_id"`
	Amount    int64  `json:"amount"`
	Unit      string `json:"unit"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.BuyerID,
		arg.ProductID,
		arg.Amount,
		arg.Unit,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.BuyerID,
		&i.ProductID,
		&i.Amount,
		&i.Unit,
		&i.CreatedAt,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, buyer_id, product_id, amount, unit, created_at FROM "order"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.BuyerID,
		&i.ProductID,
		&i.Amount,
		&i.Unit,
		&i.CreatedAt,
	)
	return i, err
}

const listOrder = `-- name: ListOrder :many
SELECT id, buyer_id, product_id, amount, unit, created_at FROM "order"
WHERE buyer_id = $1 OR product_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListOrderParams struct {
	BuyerID   int64 `json:"buyer_id"`
	ProductID int64 `json:"product_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListOrder(ctx context.Context, arg ListOrderParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrder,
		arg.BuyerID,
		arg.ProductID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.BuyerID,
			&i.ProductID,
			&i.Amount,
			&i.Unit,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
