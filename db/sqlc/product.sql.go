// Code generated by sqlc. DO NOT EDIT.
// source: product.sql

package db

import (
	"context"
)

const addProductAmount = `-- name: AddProductAmount :one
UPDATE "product"
SET amount = amount + $1
WHERE id = $2
RETURNING id, type, name, amount, update_at, created_at
`

type AddProductAmountParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddProductAmount(ctx context.Context, arg AddProductAmountParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, addProductAmount, arg.Amount, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.Amount,
		&i.UpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO "product" (
  type,
  name,
  amount
) VALUES (
  $1, $2, $3
) RETURNING id, type, name, amount, update_at, created_at
`

type CreateProductParams struct {
	Type   string `json:"type"`
	Name   string `json:"name"`
	Amount int64  `json:"amount"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.Type, arg.Name, arg.Amount)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.Amount,
		&i.UpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, type, name, amount, update_at, created_at FROM "product"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.Amount,
		&i.UpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const getProductForUpdate = `-- name: GetProductForUpdate :one
SELECT id, type, name, amount, update_at, created_at FROM "product"
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetProductForUpdate(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductForUpdate, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.Amount,
		&i.UpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const listProduct = `-- name: ListProduct :many
SELECT id, type, name, amount, update_at, created_at FROM "product"
WHERE name = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListProductParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListProduct(ctx context.Context, arg ListProductParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProduct, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Name,
			&i.Amount,
			&i.UpdateAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
